name: Deploy

on:
  workflow_dispatch:
    inputs:
      aws-env:
        description: "AWS Elastic Beanstalk Environment"
        required: true
        default: "gha-course-staging"
        type: string
      github-env:
        description: "GitHub Environment"
        required: true
        default: "staging"
        type: string
  workflow_call:
    inputs:
      aws-env:
        description: "AWS Elastic Beanstalk Environment"
        required: true
        default: "gha-course-staging"
        type: string
      github-env:
        description: "GitHub Environment"
        required: true
        default: "staging"
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.aws-env }}-${{ github.event.inputs.github-env }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.github-env }}
      url: "http://${{ steps.get-env-cname.outputs.aws_env_cname }}"

    steps:
    - name: Avoid deploying to production using a non-production environment
      if: ${{ github.event.inputs.aws-env == env.AWS_EB_PRODUCTION_ENV && github.event.inputs.github-env != 'production' }}
      run: |
        echo "::error::Cannot deploy to production using a non-production environment"
        exit 1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Node Environment
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: "npm"

    - name: Install Dependencies
      run: npm ci

    - name: Build App
      run: npm run build

    - uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip

    - name: Install EB CLI
      id: install-eb-cli
      run: pip install awsebcli

    - name: Get AWS ENV Name
      id: get-env-name
      run: |
        echo "aws_env=$(aws elasticbeanstalk describe-environments --application-name ${{ env.AWS_EB_APP_NAME }} --environment-names ${{ github.event.inputs.aws-env }} --region ${{ env.AWS_REGION }} --query 'Environments[0].EnvironmentName' --output text)" >> $GITHUB_OUTPUT

    - name: Get AWS ENV Status
      id: get-env-status
      run: |
        echo "aws_env_status=$(aws elasticbeanstalk describe-environments --application-name ${{ env.AWS_EB_APP_NAME }} --environment-names ${{ github.event.inputs.aws-env }} --region ${{ env.AWS_REGION }} --query 'Environments[0].Status' --output text)" >> $GITHUB_OUTPUT

    - name: Initialize EB
      run: eb init ${{ env.AWS_EB_APP_NAME }} --platform ${{ env.AWS_EB_PLATFORM }} --region ${{ env.AWS_REGION }}

    - name: Create a New Environment
      if: ${{ steps.get-env-name.outputs.aws_env == 'None' || steps.get-env-status.outputs.aws_env_status == 'Terminated' }}
      run: eb create ${{ github.event.inputs.aws-env }} --instance-types ${{ env.AWS_EB_ENV_INSTANCE_TYPES }} --cname ${{ github.event.inputs.aws-env }}

    - name: Deploy if Environment Exists
      if: ${{ steps.get-env-name.outputs.aws_env == github.event.inputs.aws-env && steps.get-env-status.outputs.aws_env_status != 'Terminated' }}
      run: eb deploy ${{ github.event.inputs.aws-env }}

    - name: Get AWS ENV CNAME
      id: get-env-cname
      run: |
        echo "aws_env_cname=$(aws elasticbeanstalk describe-environments --application-name ${{ env.AWS_EB_APP_NAME }} --environment-names ${{ github.event.inputs.aws-env }} --region ${{ env.AWS_REGION }} --query 'Environments[0].CNAME' --output text)" >> $GITHUB_OUTPUT

    - name: Abort if Cancelled
      if: ${{ cancelled() && steps.install-eb-cli.conclusion == 'success' }}
      run: eb abort ${{ github.event.inputs.aws-env }}
